/* parser generated by jison 0.4.2 */
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"text":4,"EOF":5,"statement":6,";":7,"event_binding_def":8,"events":9,"ESEP":10,"handlers":11,"event_expression":12,",":13,"event":14,"values":15,"IDENTIFIER":16,"/":17,"@":18,"handler":19,"block":20,"|":21,"value":22,"fn":23,"primitive":24,"complex":25,"expr":26,"(":27,")":28,"QUOTE":29,"NAN":30,"NULL":31,"KEYWORD":32,"STRING":33,"number":34,"INT":35,"FLOAT":36,"[":37,"vector":38,"]":39,"vec_item":40,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",10:"ESEP",13:",",16:"IDENTIFIER",17:"/",18:"@",21:"|",27:"(",28:")",29:"QUOTE",30:"NAN",31:"NULL",32:"KEYWORD",33:"STRING",35:"INT",36:"FLOAT",37:"[",39:"]"},
productions_: [0,[3,0],[3,2],[4,1],[4,3],[6,1],[6,1],[8,3],[9,1],[9,3],[12,1],[12,2],[14,1],[14,3],[14,3],[14,5],[11,1],[11,3],[19,1],[19,3],[20,1],[20,1],[20,2],[15,1],[15,2],[22,1],[22,1],[22,1],[26,3],[26,4],[24,1],[24,1],[24,1],[24,1],[24,1],[34,1],[34,1],[25,3],[38,0],[38,2],[40,1],[40,1],[40,1],[23,1],[23,3],[23,3],[23,5]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 2:
           //console.log($$[$0-1]);
           return $$[$0-1];
        
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4:
           this.$ = ($$[$0-2]).concat($$[$0]);
        
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = {events: $$[$0-2], handlers: $$[$0]}; 
break;
case 8: this.$ = [$$[$0]]; 
break;
case 9: this.$ = ($$[$0-2]).concat([$$[$0]]); 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = {type: 'partial-event', event: $$[$0-1], args: $$[$0]}; 
break;
case 12: this.$ = {ns: undefined, name: $$[$0], scope: undefined, type: 'event'}; 
break;
case 13: this.$ = {ns: $$[$0-2], name: $$[$0-1], scope: undefined, type: 'event'}; 
break;
case 14: this.$ = {ns: undefined, name: $$[$0-2], scope: $$[$0], type: 'event'}; 
break;
case 15: this.$ = {ns: $$[$0-4], name: $$[$0-2], scope: $$[$0], type: 'event'}; 
break;
case 16: this.$ = [$$[$0]]; 
break;
case 17: this.$ = ($$[$0-2]).concat([$$[$0]]); 
break;
case 18: this.$ = {type: 'handler', seq: [$$[$0]]}; 
break;
case 19: this.$ = {type: 'handler', seq: $$[$0-2].seq.concat([$$[$0]])}; 
break;
case 20: this.$ = $$[$0]; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = { type: "partial", fn: $$[$0-1], args: $$[$0]}; 
break;
case 23: this.$ = [$$[$0]]; 
break;
case 24: this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 25: this.$ = $$[$0]; 
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: this.$ = {type: 'nested', value: $$[$0-1]}; 
break;
case 29: this.$ = {type: 'quoted-nested', value: $$[$0-1]}; 
break;
case 30: this.$ = { type: "NaN", value: NaN }; 
break;
case 31: this.$ = { type: "null", value: null }; 
break;
case 32: this.$ = { type: "keyword", value: $$[$0] }; 
break;
case 33: this.$ = { type: "string", value: ($$[$0]).match('\"(\\.|[^\\"]*?)\"')[1] }; 
break;
case 34: this.$ = $$[$0]; 
break;
case 35: this.$ = { type: "integer", value: parseInt($$[$0], 10)}; 
break;
case 36: this.$ = { type: "float", value: parseFloat($$[$0], 10)}; 
break;
case 37: this.$ = { type: "vector", value: $$[$0-1]}; 
break;
case 38: this.$ = []; 
break;
case 39: this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 40: this.$ = $$[$0]; 
break;
case 41: this.$ = $$[$0]; 
break;
case 42: this.$ = $$[$0]; 
break;
case 43: this.$ = {type: 'fn', ns: undefined, name: $$[$0], scope: undefined}; 
break;
case 44: this.$ = {type: 'fn', ns: $$[$0-2], name: $$[$0], scope: undefined}; 
break;
case 45: this.$ = {type: 'fn', ns: undefined, name: $$[$0-2], scope: $$[$0]}; 
break;
case 46: this.$ = {type: 'fn', ns: $$[$0-4], name: $$[$0-2], scope: $$[$0]}; 
break;
}
},
table: [{1:[2,1],3:1,4:2,6:3,7:[1,4],8:5,9:6,12:7,14:8,16:[1,9]},{1:[3]},{5:[1,10],7:[1,11]},{5:[2,3],7:[2,3]},{5:[2,5],7:[2,5]},{5:[2,6],7:[2,6]},{10:[1,12],13:[1,13]},{10:[2,8],13:[2,8]},{10:[2,10],13:[2,10],15:14,22:15,24:16,25:17,26:18,27:[1,25],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24]},{10:[2,12],13:[2,12],17:[1,29],18:[1,30],27:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],35:[2,12],36:[2,12],37:[2,12]},{1:[2,2]},{6:31,7:[1,4],8:5,9:6,12:7,14:8,16:[1,9]},{11:32,16:[1,37],19:33,20:34,22:35,23:36,24:16,25:17,26:18,27:[1,25],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24]},{12:38,14:8,16:[1,9]},{10:[2,11],13:[2,11],22:39,24:16,25:17,26:18,27:[1,25],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24]},{5:[2,23],7:[2,23],10:[2,23],13:[2,23],21:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],35:[2,23],36:[2,23],37:[2,23]},{5:[2,25],7:[2,25],10:[2,25],13:[2,25],21:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],35:[2,25],36:[2,25],37:[2,25]},{5:[2,26],7:[2,26],10:[2,26],13:[2,26],21:[2,26],27:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],35:[2,26],36:[2,26],37:[2,26]},{5:[2,27],7:[2,27],10:[2,27],13:[2,27],21:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],35:[2,27],36:[2,27],37:[2,27]},{5:[2,30],7:[2,30],10:[2,30],13:[2,30],21:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],35:[2,30],36:[2,30],37:[2,30],39:[2,30]},{5:[2,31],7:[2,31],10:[2,31],13:[2,31],21:[2,31],27:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],35:[2,31],36:[2,31],37:[2,31],39:[2,31]},{5:[2,32],7:[2,32],10:[2,32],13:[2,32],21:[2,32],27:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],35:[2,32],36:[2,32],37:[2,32],39:[2,32]},{5:[2,33],7:[2,33],10:[2,33],13:[2,33],21:[2,33],27:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],35:[2,33],36:[2,33],37:[2,33],39:[2,33]},{5:[2,34],7:[2,34],10:[2,34],13:[2,34],21:[2,34],27:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],35:[2,34],36:[2,34],37:[2,34],39:[2,34]},{27:[2,38],29:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],35:[2,38],36:[2,38],37:[2,38],38:40,39:[2,38]},{16:[1,37],19:41,20:34,22:35,23:36,24:16,25:17,26:18,27:[1,25],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24]},{27:[1,42]},{5:[2,35],7:[2,35],10:[2,35],13:[2,35],21:[2,35],27:[2,35],28:[2,35],29:[2,35],30:[2,35],31:[2,35],32:[2,35],33:[2,35],35:[2,35],36:[2,35],37:[2,35],39:[2,35]},{5:[2,36],7:[2,36],10:[2,36],13:[2,36],21:[2,36],27:[2,36],28:[2,36],29:[2,36],30:[2,36],31:[2,36],32:[2,36],33:[2,36],35:[2,36],36:[2,36],37:[2,36],39:[2,36]},{16:[1,43]},{16:[1,44]},{5:[2,4],7:[2,4]},{5:[2,7],7:[2,7],13:[1,45]},{5:[2,16],7:[2,16],13:[2,16],21:[1,46]},{5:[2,18],7:[2,18],13:[2,18],21:[2,18],28:[2,18]},{5:[2,20],7:[2,20],13:[2,20],21:[2,20],28:[2,20]},{5:[2,21],7:[2,21],13:[2,21],15:47,21:[2,21],22:15,24:16,25:17,26:18,27:[1,25],28:[2,21],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24]},{5:[2,43],7:[2,43],13:[2,43],17:[1,48],18:[1,49],21:[2,43],27:[2,43],28:[2,43],29:[2,43],30:[2,43],31:[2,43],32:[2,43],33:[2,43],35:[2,43],36:[2,43],37:[2,43]},{10:[2,9],13:[2,9]},{5:[2,24],7:[2,24],10:[2,24],13:[2,24],21:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],35:[2,24],36:[2,24],37:[2,24]},{24:52,25:53,26:54,27:[1,25],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24],39:[1,50],40:51},{21:[1,46],28:[1,55]},{16:[1,37],19:56,20:34,22:35,23:36,24:16,25:17,26:18,27:[1,25],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24]},{10:[2,13],13:[2,13],18:[1,57],27:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],35:[2,13],36:[2,13],37:[2,13]},{10:[2,14],13:[2,14],27:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],35:[2,14],36:[2,14],37:[2,14]},{16:[1,37],19:58,20:34,22:35,23:36,24:16,25:17,26:18,27:[1,25],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24]},{16:[1,37],20:59,22:35,23:36,24:16,25:17,26:18,27:[1,25],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24]},{5:[2,22],7:[2,22],13:[2,22],21:[2,22],22:39,24:16,25:17,26:18,27:[1,25],28:[2,22],29:[1,26],30:[1,19],31:[1,20],32:[1,21],33:[1,22],34:23,35:[1,27],36:[1,28],37:[1,24]},{16:[1,60]},{16:[1,61]},{5:[2,37],7:[2,37],10:[2,37],13:[2,37],21:[2,37],27:[2,37],28:[2,37],29:[2,37],30:[2,37],31:[2,37],32:[2,37],33:[2,37],35:[2,37],36:[2,37],37:[2,37],39:[2,37]},{27:[2,39],29:[2,39],30:[2,39],31:[2,39],32:[2,39],33:[2,39],35:[2,39],36:[2,39],37:[2,39],39:[2,39]},{27:[2,40],29:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],35:[2,40],36:[2,40],37:[2,40],39:[2,40]},{27:[2,41],29:[2,41],30:[2,41],31:[2,41],32:[2,41],33:[2,41],35:[2,41],36:[2,41],37:[2,41],39:[2,41]},{27:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],35:[2,42],36:[2,42],37:[2,42],39:[2,42]},{5:[2,28],7:[2,28],10:[2,28],13:[2,28],21:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],35:[2,28],36:[2,28],37:[2,28],39:[2,28]},{21:[1,46],28:[1,62]},{16:[1,63]},{5:[2,17],7:[2,17],13:[2,17],21:[1,46]},{5:[2,19],7:[2,19],13:[2,19],21:[2,19],28:[2,19]},{5:[2,44],7:[2,44],13:[2,44],18:[1,64],21:[2,44],27:[2,44],28:[2,44],29:[2,44],30:[2,44],31:[2,44],32:[2,44],33:[2,44],35:[2,44],36:[2,44],37:[2,44]},{5:[2,45],7:[2,45],13:[2,45],21:[2,45],27:[2,45],28:[2,45],29:[2,45],30:[2,45],31:[2,45],32:[2,45],33:[2,45],35:[2,45],36:[2,45],37:[2,45]},{5:[2,29],7:[2,29],10:[2,29],13:[2,29],21:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],35:[2,29],36:[2,29],37:[2,29],39:[2,29]},{10:[2,15],13:[2,15],27:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],35:[2,15],36:[2,15],37:[2,15]},{16:[1,65]},{5:[2,46],7:[2,46],13:[2,46],21:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],35:[2,46],36:[2,46],37:[2,46]}],
defaultActions: {10:[2,2]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
undefined/* generated by jison-lex 0.1.0 */
var lexer = (function(){
var lexer = {
EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 36
break;
case 2:return 35
break;
case 3:return 33
break;
case 4:return 30
break;
case 5:return 31
break;
case 6:return 32
break;
case 7:return 10
break;
case 8:return 16
break;
case 9:return 'DBLQUOTE'
break;
case 10:return 29
break;
case 11:return 27
break;
case 12:return 28
break;
case 13:return 37
break;
case 14:return 39
break;
case 15:return '^'
break;
case 16:return 18
break;
case 17:return 21
break;
case 18:return 13
break;
case 19:return 17
break;
case 20:return 7
break;
case 21:return ':'
break;
case 22:return 5
break;
case 23:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+\.[0-9]*)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^\\"]*?)")/,/^(?:NaN\b)/,/^(?:null\b)/,/^(?::\(\?=\[a-z0-9\]\+\?\))/,/^(?::)/,/^(?:[A-Za-z_\-<>+*=$#%^&!?][A-Za-z0-9_\-<>+*=$#%^&!?]*)/,/^(?:")/,/^(?:')/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\^)/,/^(?:@)/,/^(?:\|)/,/^(?:,)/,/^(?:\/)/,/^(?:;)/,/^(?::)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}