// Generated by CoffeeScript 1.3.1
(function() {
  var OK, aop_m, aop_t, cont_m, cont_t, debug, domonad, drop_while, error, error_m, error_t, first, identity, identity_m, info, is_error, is_function, is_null, lift_async, lift_sync, logger_m, logger_t, maybe_m, maybe_t, metabolize, partial, warn, _ref, _ref1,
    __slice = [].slice;

  _ref = require('libprotein'), identity = _ref.identity, first = _ref.first, drop_while = _ref.drop_while, is_function = _ref.is_function, partial = _ref.partial, metabolize = _ref.metabolize;

  _ref1 = require('console-logger'), info = _ref1.info, warn = _ref1.warn, error = _ref1.error, debug = _ref1.debug;

  is_null = function() {
    var v;
    v = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (v.length === 0) {
      return null;
    } else {
      return v[0] === null;
    }
  };

  domonad = function(_arg, functions, init_value) {
    var bind, f0, result;
    result = _arg.result, bind = _arg.bind;
    f0 = bind(result(init_value), functions[0]);
    return ([f0].concat(functions.slice(1))).reduce(function(a, b) {
      return bind(a, b);
    });
  };

  identity_m = function() {
    return {
      result: identity,
      bind: function(mv, f) {
        return f(mv);
      }
    };
  };

  OK = void 0;

  is_error = function(_arg) {
    var err, val;
    err = _arg[0], val = _arg[1];
    return err !== OK;
  };

  error_m = function() {
    return {
      result: function(v) {
        return [OK, v];
      },
      bind: function(mv, f) {
        if (is_error(mv)) {
          return mv;
        } else {
          return f(mv[1]);
        }
      }
    };
  };

  error_t = function(inner) {
    return {
      result: function(v) {
        return [OK, inner.result(v)];
      },
      bind: function(mv, f) {
        if (is_error(mv)) {
          return mv;
        } else {
          return inner.bind(mv[1], f);
        }
      }
    };
  };

  maybe_m = function(_arg) {
    var is_error;
    is_error = _arg.is_error;
    return {
      zero: function() {
        return is_error();
      },
      result: function(v) {
        return v;
      },
      bind: function(mv, f) {
        if (is_error(mv)) {
          return mv;
        } else {
          return f(mv);
        }
      },
      plus: function() {
        var mvs;
        mvs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return first(drop_while(is_error(mvs)));
      }
    };
  };

  maybe_t = function(inner, _arg) {
    var is_error;
    is_error = _arg.is_error;
    return {
      result: function(v) {
        return inner.result(v);
      },
      bind: function(mv, f) {
        if (is_error(mv)) {
          return mv;
        } else {
          return inner.bind(mv, f);
        }
      }
    };
  };

  aop_m = function() {
    return {
      result: function(v) {
        return v;
      },
      bind: function(mv, f) {
        var _ref2, _ref3;
        if ((_ref2 = f.meta) != null ? (_ref3 = _ref2.concerns) != null ? _ref3.after : void 0 : void 0) {
          f.meta.concerns.after.map(function(_arg) {
            var check, handle;
            check = _arg[0], handle = _arg[1];
            debug('<aop_m>', "concern found for " + f.meta.protocol + "/" + f.meta.name, mv);
            if (check(mv)) {
              return handle(mv);
            }
          });
        }
        return f(mv);
      }
    };
  };

  aop_t = function(inner) {
    return {
      result: function(v) {
        return inner.result(v);
      },
      bind: function(mv, f) {
        var _ref2, _ref3;
        if ((_ref2 = f.meta) != null ? (_ref3 = _ref2.concerns) != null ? _ref3.after : void 0 : void 0) {
          return f.meta.concerns.after.map(function(_arg) {
            var check, handle;
            check = _arg[0], handle = _arg[1];
            debug('<aop_t>', "concern found for " + f.meta.protocol + "/" + f.meta.name, mv);
            if (check(mv)) {
              return handle(inner.bind(mv, f));
            }
          });
        } else {
          return inner.bind(mv, f);
        }
      }
    };
  };

  logger_m = function(log_fn) {
    var log;
    log = partial(log_fn, '<logger_m>');
    return {
      result: function(v) {
        log("Got value:", {
          v: v
        });
        return v;
      },
      bind: function(mv, f) {
        var r, _ref2, _ref3;
        log("Going to call f(mv):", "" + (((_ref2 = f.meta) != null ? _ref2.protocol : void 0) || '-') + "/" + (((_ref3 = f.meta) != null ? _ref3.name : void 0) || f), {
          mv: mv
        });
        r = f(mv);
        return log("Got result:", {
          r: r
        });
      }
    };
  };

  logger_t = function(inner, log_fn) {
    var log;
    log = partial(log_fn, '<logger_t>');
    return {
      result: function(v) {
        var r;
        log("Got value:", {
          v: v
        });
        r = inner.result(v);
        log("Got inner monad's result value:", {
          r: r
        });
        return r;
      },
      bind: function(mv, f) {
        var r, _ref2, _ref3;
        log("Going to call f(mv):", "" + (((_ref2 = f.meta) != null ? _ref2.protocol : void 0) || '-') + "/" + (((_ref3 = f.meta) != null ? _ref3.name : void 0) || f), {
          mv: mv
        });
        r = inner.bind(mv, f);
        log("Got result:", {
          r: r
        });
        return r;
      }
    };
  };

  cont_m = function() {
    return {
      result: function(v) {
        return function(c) {
          return c(v);
        };
      },
      bind: function(mv, f) {
        return function(c) {
          return mv((function(v) {
            return (f(v))(c);
          }));
        };
      }
    };
  };

  cont_t = function(inner) {
    return {
      result: function(v) {
        return function(c) {
          return c(inner.result(v));
        };
      },
      bind: function(mv, f) {
        return function(c) {
          var get_h;
          get_h = function(v) {
            var inner_bind_res;
            inner_bind_res = inner.bind(v, f);
            if (is_function(inner_bind_res)) {
              return inner_bind_res;
            } else {
              return function(c) {
                return c(inner_bind_res);
              };
            }
          };
          return mv((function(v) {
            return (get_h(v))(c);
          }));
        };
      }
    };
  };

  lift_sync = function(arity, f) {
    ' Lifts a function:\nf: arg1 -> ... -> argN\nto a function:\nf1: (arg1 -> ... -> argN) -> cont';

    var g;
    g = function() {
      var args, h;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      h = function(c) {
        var res;
        res = f.apply(null, args.slice(0, arity));
        return c(res);
      };
      return metabolize(f, h);
    };
    return metabolize(f, g);
  };

  lift_async = function(arity, f) {
    ' Lifts a function:\nf: arg1 -> ... -> argN -> cb\nto a function:\nf1: (arg1 -> ... argN) -> cont';

    var g;
    g = function() {
      var args, h;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      h = function(c) {
        return f.apply(null, args.slice(0, arity - 1).concat([c]));
      };
      return metabolize(f, h);
    };
    return metabolize(f, g);
  };

  module.exports = {
    domonad: domonad,
    identity_m: identity_m,
    maybe_m: maybe_m,
    maybe_t: maybe_t,
    aop_m: aop_m,
    aop_t: aop_t,
    error_m: error_m,
    error_t: error_t,
    cont_m: cont_m,
    cont_t: cont_t,
    logger_m: logger_m,
    logger_t: logger_t,
    lift_sync: lift_sync,
    lift_async: lift_async,
    is_null: is_null
  };

}).call(this);
