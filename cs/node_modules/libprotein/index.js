// Generated by CoffeeScript 1.6.0
(function() {
  var X,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  X = {
    partial: function() {
      var f, partial_args, y;
      f = arguments[0], partial_args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      y = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return f.apply(null, partial_args.concat(args));
      };
      return X.metabolize(f, y);
    },
    complement: function(f) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return !(f.apply(null, args));
      };
    },
    compose2: function(f, g) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return f(g.apply(null, args));
      };
    },
    compose3: function(f, g, h) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return f(g(h.apply(null, args)));
      };
    },
    first: function(s) {
      return s[0];
    },
    identity: function(x) {
      return x;
    },
    drop_while: function(f, s) {
      var i, _i, _len;
      for (_i = 0, _len = s.length; _i < _len; _i++) {
        i = s[_i];
        if (!(f(i))) {
          return i;
        }
      }
    },
    is_function: function(v) {
      return typeof v === 'function';
    },
    is_array: function(v) {
      return Array.isArray(v);
    },
    is_object: function(v) {
      if (X.is_array(v)) {
        return false;
      } else {
        return v instanceof {}.constructor;
      }
    },
    bool: function(v) {
      if (X.is_array(v)) {
        return !!v.length;
      } else if (X.is_object(v)) {
        return !!(Object.keys(v).length);
      } else {
        return !!v;
      }
    },
    and_: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return args.reduce(function(a, b) {
        return (X.bool(a)) && (X.bool(b));
      }, true);
    },
    or_: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return args.reduce(function(a, b) {
        return (X.bool(a)) || (X.bool(b));
      }, false);
    },
    to_hash: function(list_of_tuples) {
      var h;
      h = {};
      list_of_tuples.map(function(_arg) {
        var k, v;
        k = _arg[0], v = _arg[1];
        return h[k] = v;
      });
      return h;
    },
    metabolize: function(f, g) {
      g.meta = f.meta;
      return g;
    },
    data_to_opts: function(sufx, node) {
      var $node, keys;
      $node = jQuery(node);
      keys = Object.keys($node.data());
      return X.to_hash(keys.filter(function(key) {
        return key.slice(0, sufx.length) === sufx;
      }).map(function(key) {
        return [key.slice(sufx.length), $node.data(key)];
      }));
    },
    add2: function(a, b) {
      var k, ret, v;
      if ((X.is_array(a)) && (X.is_array(b))) {
        return a.concat(b);
      } else if ((X.is_object(a)) && (X.is_object(b))) {
        ret = {};
        for (k in a) {
          if (!__hasProp.call(a, k)) continue;
          v = a[k];
          ret[k] = v;
        }
        for (k in b) {
          if (!__hasProp.call(b, k)) continue;
          v = b[k];
          ret[k] = v;
        }
        return ret;
      } else {
        return a + b;
      }
    },
    add: function() {
      var values;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return values.reduce(function(a, b) {
        return X.add2(a, b);
      });
    },
    pubsubhub: function() {
      return (function() {
        var q;
        q = {};
        return {
          sub: function(name, f) {
            q[name] || (q[name] = []);
            return q[name].push(f);
          },
          pub: function() {
            var data, name, _ref;
            name = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            return (_ref = q[name]) != null ? _ref.map(function(f) {
              return f.apply(null, data);
            }) : void 0;
          },
          unsub: function(name, f) {
            if (q[name]) {
              return q[name] = q[name].filter(function(s) {
                return s !== f;
              });
            }
          },
          unsuball: function(name) {
            if (q[name]) {
              return q[name] = [];
            }
          }
        };
      })();
    },
    distinct: function(list) {
      var i, k, t, v, _i, _len, _results;
      t = {};
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        i = list[_i];
        t[i] = i;
      }
      _results = [];
      for (k in t) {
        v = t[k];
        _results.push(v);
      }
      return _results;
    },
    repeat: function(v, n) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        _results.push(v);
      }
      return _results;
    }
  };

  module.exports = X;

}).call(this);
